//
// GithubAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GithubAPI {

    weak var client: CarbonAIClient?

    public init(client: CarbonAIClient) {
        self.client = client
    }

    /**
     Issue
     
     - parameter issueNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getIssueSync(issueNumber: Int, includeRemoteData: Bool? = nil, dataSourceId: Int? = nil, repository: String? = nil, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: Issue?, _ error: Error?) -> Void)) -> RequestTask {
        return getIssueWithRequestBuilder(issueNumber: issueNumber, includeRemoteData: includeRemoteData, dataSourceId: dataSourceId, repository: repository).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue
     
     - parameter issueNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getIssueAsyncMappedParams(issueNumber: Int, includeRemoteData: Bool? = nil, dataSourceId: Int? = nil, repository: String? = nil) async throws -> Issue {
        return try await withCheckedThrowingContinuation { continuation in
            getIssueWithRequestBuilder(issueNumber: issueNumber, includeRemoteData: includeRemoteData, dataSourceId: dataSourceId, repository: repository).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Issue
     
     - parameter issueNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getIssue(
        issueNumber: Int,
        includeRemoteData: Bool? = nil, 
        dataSourceId: Int? = nil, 
        repository: String? = nil
    ) async throws -> Issue {
        return try await withCheckedThrowingContinuation { continuation in
            getIssueWithRequestBuilder(issueNumber: issueNumber, includeRemoteData: includeRemoteData, dataSourceId: dataSourceId, repository: repository).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Issue
     
     - parameter issueNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getIssue(
        issueNumber: Int,
        includeRemoteData: Bool? = nil, 
        dataSourceId: Int? = nil, 
        repository: String? = nil
    ) async throws -> Issue {
        return try await withCheckedThrowingContinuation { continuation in
            getIssueWithRequestBuilder(issueNumber: issueNumber, includeRemoteData: includeRemoteData, dataSourceId: dataSourceId, repository: repository).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Issue
     - GET /integrations/data/github/issues/{issue_number}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter issueNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - returns: RequestBuilder<Issue> 
     */
    open class func getIssueWithRequestBuilder(
            issueNumber: Int,
            includeRemoteData: Bool? = nil,
            dataSourceId: Int? = nil,
            repository: String? = nil
    ) -> RequestBuilder<Issue> {
        let basePath = CarbonAIAPI.basePath;
        var localVariablePath = "/integrations/data/github/issues/{issue_number}"
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "data_source_id": (wrappedValue: dataSourceId?.encodeToJSON(), isExplode: true),
            "repository": (wrappedValue: repository?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Issue>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/github/issues/{issue_number}")
    }

    /**
     Issue
     - GET /integrations/data/github/issues/{issue_number}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter issueNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - returns: RequestBuilder<Issue> 
     */
    open func getIssueWithRequestBuilder(
            issueNumber: Int,
            includeRemoteData: Bool? = nil,
            dataSourceId: Int? = nil,
            repository: String? = nil
    ) -> RequestBuilder<Issue> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/integrations/data/github/issues/{issue_number}"
        let issueNumberPreEscape = "\(APIHelper.mapValueToPathItem(issueNumber))"
        let issueNumberPostEscape = issueNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{issue_number}", with: issueNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "data_source_id": (wrappedValue: dataSourceId?.encodeToJSON(), isExplode: true),
            "repository": (wrappedValue: repository?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Issue>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/github/issues/{issue_number}")
    }


    /**
     Issues
     
     - parameter issuesInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getIssuesSync(issuesInput: IssuesInput, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: IssuesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getIssuesWithRequestBuilder(issuesInput: issuesInput).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issues
     
     - parameter issuesInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getIssuesAsyncMappedParams(issuesInput: IssuesInput) async throws -> IssuesResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getIssuesWithRequestBuilder(issuesInput: issuesInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Issues
     
     - parameter issuesInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getIssues(
        dataSourceId: Int,
        repository: String,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil, 
        filters: IssuesFilter? = nil, 
        orderBy: IssuesOrderBy? = nil, 
        orderDir: OrderDirV2Nullable? = nil
    ) async throws -> IssuesResponse {
        let issuesInput = IssuesInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            filters: filters,
            orderBy: orderBy,
            orderDir: orderDir
        )
        return try await withCheckedThrowingContinuation { continuation in
            getIssuesWithRequestBuilder(issuesInput: issuesInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Issues
     
     - parameter issuesInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getIssues(
        dataSourceId: Int,
        repository: String,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil, 
        filters: IssuesFilter? = nil, 
        orderBy: IssuesOrderBy? = nil, 
        orderDir: OrderDirV2Nullable? = nil
    ) async throws -> IssuesResponse {
        let issuesInput = IssuesInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            filters: filters,
            orderBy: orderBy,
            orderDir: orderDir
        )
        return try await withCheckedThrowingContinuation { continuation in
            getIssuesWithRequestBuilder(issuesInput: issuesInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Issues
     - POST /integrations/data/github/issues
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter issuesInput: (body)  
     - returns: RequestBuilder<IssuesResponse> 
     */
    open class func getIssuesWithRequestBuilder(
            issuesInput: IssuesInput
    ) -> RequestBuilder<IssuesResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/github/issues"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: issuesInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<IssuesResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/issues")
    }

    /**
     Issues
     - POST /integrations/data/github/issues
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter issuesInput: (body)  
     - returns: RequestBuilder<IssuesResponse> 
     */
    open func getIssuesWithRequestBuilder(
            issuesInput: IssuesInput
    ) -> RequestBuilder<IssuesResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/github/issues"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: issuesInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<IssuesResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/issues")
    }


    /**
     Get Pr
     
     - parameter pullNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPrSync(pullNumber: Int, includeRemoteData: Bool? = nil, dataSourceId: Int? = nil, repository: String? = nil, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestExtended?, _ error: Error?) -> Void)) -> RequestTask {
        return getPrWithRequestBuilder(pullNumber: pullNumber, includeRemoteData: includeRemoteData, dataSourceId: dataSourceId, repository: repository).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Pr
     
     - parameter pullNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getPrAsyncMappedParams(pullNumber: Int, includeRemoteData: Bool? = nil, dataSourceId: Int? = nil, repository: String? = nil) async throws -> PullRequestExtended {
        return try await withCheckedThrowingContinuation { continuation in
            getPrWithRequestBuilder(pullNumber: pullNumber, includeRemoteData: includeRemoteData, dataSourceId: dataSourceId, repository: repository).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Pr
     
     - parameter pullNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getPr(
        pullNumber: Int,
        includeRemoteData: Bool? = nil, 
        dataSourceId: Int? = nil, 
        repository: String? = nil
    ) async throws -> PullRequestExtended {
        return try await withCheckedThrowingContinuation { continuation in
            getPrWithRequestBuilder(pullNumber: pullNumber, includeRemoteData: includeRemoteData, dataSourceId: dataSourceId, repository: repository).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Pr
     
     - parameter pullNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getPr(
        pullNumber: Int,
        includeRemoteData: Bool? = nil, 
        dataSourceId: Int? = nil, 
        repository: String? = nil
    ) async throws -> PullRequestExtended {
        return try await withCheckedThrowingContinuation { continuation in
            getPrWithRequestBuilder(pullNumber: pullNumber, includeRemoteData: includeRemoteData, dataSourceId: dataSourceId, repository: repository).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Pr
     - GET /integrations/data/github/pull_requests/{pull_number}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter pullNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - returns: RequestBuilder<PullRequestExtended> 
     */
    open class func getPrWithRequestBuilder(
            pullNumber: Int,
            includeRemoteData: Bool? = nil,
            dataSourceId: Int? = nil,
            repository: String? = nil
    ) -> RequestBuilder<PullRequestExtended> {
        let basePath = CarbonAIAPI.basePath;
        var localVariablePath = "/integrations/data/github/pull_requests/{pull_number}"
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "data_source_id": (wrappedValue: dataSourceId?.encodeToJSON(), isExplode: true),
            "repository": (wrappedValue: repository?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<PullRequestExtended>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/github/pull_requests/{pull_number}")
    }

    /**
     Get Pr
     - GET /integrations/data/github/pull_requests/{pull_number}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter pullNumber: (path)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter dataSourceId: (query)  (optional)
     - parameter repository: (query)  (optional)
     - returns: RequestBuilder<PullRequestExtended> 
     */
    open func getPrWithRequestBuilder(
            pullNumber: Int,
            includeRemoteData: Bool? = nil,
            dataSourceId: Int? = nil,
            repository: String? = nil
    ) -> RequestBuilder<PullRequestExtended> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/integrations/data/github/pull_requests/{pull_number}"
        let pullNumberPreEscape = "\(APIHelper.mapValueToPathItem(pullNumber))"
        let pullNumberPostEscape = pullNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pull_number}", with: pullNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "data_source_id": (wrappedValue: dataSourceId?.encodeToJSON(), isExplode: true),
            "repository": (wrappedValue: repository?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<PullRequestExtended>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/github/pull_requests/{pull_number}")
    }


    /**
     Pr Comments
     
     - parameter commentsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPrCommentsSync(commentsInput: CommentsInput, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: CommentsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getPrCommentsWithRequestBuilder(commentsInput: commentsInput).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Pr Comments
     
     - parameter commentsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getPrCommentsAsyncMappedParams(commentsInput: CommentsInput) async throws -> CommentsResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getPrCommentsWithRequestBuilder(commentsInput: commentsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Pr Comments
     
     - parameter commentsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getPrComments(
        dataSourceId: Int,
        repository: String,
        pullNumber: Int,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil, 
        orderBy: CommentsOrderBy? = nil, 
        orderDir: OrderDirV2Nullable? = nil
    ) async throws -> CommentsResponse {
        let commentsInput = CommentsInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            pullNumber: pullNumber,
            orderBy: orderBy,
            orderDir: orderDir
        )
        return try await withCheckedThrowingContinuation { continuation in
            getPrCommentsWithRequestBuilder(commentsInput: commentsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Pr Comments
     
     - parameter commentsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getPrComments(
        dataSourceId: Int,
        repository: String,
        pullNumber: Int,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil, 
        orderBy: CommentsOrderBy? = nil, 
        orderDir: OrderDirV2Nullable? = nil
    ) async throws -> CommentsResponse {
        let commentsInput = CommentsInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            pullNumber: pullNumber,
            orderBy: orderBy,
            orderDir: orderDir
        )
        return try await withCheckedThrowingContinuation { continuation in
            getPrCommentsWithRequestBuilder(commentsInput: commentsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Pr Comments
     - POST /integrations/data/github/pull_requests/comments
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter commentsInput: (body)  
     - returns: RequestBuilder<CommentsResponse> 
     */
    open class func getPrCommentsWithRequestBuilder(
            commentsInput: CommentsInput
    ) -> RequestBuilder<CommentsResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/github/pull_requests/comments"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentsInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<CommentsResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/pull_requests/comments")
    }

    /**
     Pr Comments
     - POST /integrations/data/github/pull_requests/comments
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter commentsInput: (body)  
     - returns: RequestBuilder<CommentsResponse> 
     */
    open func getPrCommentsWithRequestBuilder(
            commentsInput: CommentsInput
    ) -> RequestBuilder<CommentsResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/github/pull_requests/comments"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentsInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<CommentsResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/pull_requests/comments")
    }


    /**
     Pr Commits
     
     - parameter commitsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPrCommitsSync(commitsInput: CommitsInput, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: CommitsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getPrCommitsWithRequestBuilder(commitsInput: commitsInput).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Pr Commits
     
     - parameter commitsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getPrCommitsAsyncMappedParams(commitsInput: CommitsInput) async throws -> CommitsResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getPrCommitsWithRequestBuilder(commitsInput: commitsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Pr Commits
     
     - parameter commitsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getPrCommits(
        dataSourceId: Int,
        repository: String,
        pullNumber: Int,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil
    ) async throws -> CommitsResponse {
        let commitsInput = CommitsInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            pullNumber: pullNumber
        )
        return try await withCheckedThrowingContinuation { continuation in
            getPrCommitsWithRequestBuilder(commitsInput: commitsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Pr Commits
     
     - parameter commitsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getPrCommits(
        dataSourceId: Int,
        repository: String,
        pullNumber: Int,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil
    ) async throws -> CommitsResponse {
        let commitsInput = CommitsInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            pullNumber: pullNumber
        )
        return try await withCheckedThrowingContinuation { continuation in
            getPrCommitsWithRequestBuilder(commitsInput: commitsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Pr Commits
     - POST /integrations/data/github/pull_requests/commits
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter commitsInput: (body)  
     - returns: RequestBuilder<CommitsResponse> 
     */
    open class func getPrCommitsWithRequestBuilder(
            commitsInput: CommitsInput
    ) -> RequestBuilder<CommitsResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/github/pull_requests/commits"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commitsInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<CommitsResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/pull_requests/commits")
    }

    /**
     Pr Commits
     - POST /integrations/data/github/pull_requests/commits
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter commitsInput: (body)  
     - returns: RequestBuilder<CommitsResponse> 
     */
    open func getPrCommitsWithRequestBuilder(
            commitsInput: CommitsInput
    ) -> RequestBuilder<CommitsResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/github/pull_requests/commits"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commitsInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<CommitsResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/pull_requests/commits")
    }


    /**
     Pr Files
     
     - parameter filesInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPrFilesSync(filesInput: FilesInput, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: FilesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getPrFilesWithRequestBuilder(filesInput: filesInput).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Pr Files
     
     - parameter filesInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getPrFilesAsyncMappedParams(filesInput: FilesInput) async throws -> FilesResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getPrFilesWithRequestBuilder(filesInput: filesInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Pr Files
     
     - parameter filesInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getPrFiles(
        dataSourceId: Int,
        repository: String,
        pullNumber: Int,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil
    ) async throws -> FilesResponse {
        let filesInput = FilesInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            pullNumber: pullNumber
        )
        return try await withCheckedThrowingContinuation { continuation in
            getPrFilesWithRequestBuilder(filesInput: filesInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Pr Files
     
     - parameter filesInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getPrFiles(
        dataSourceId: Int,
        repository: String,
        pullNumber: Int,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil
    ) async throws -> FilesResponse {
        let filesInput = FilesInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            pullNumber: pullNumber
        )
        return try await withCheckedThrowingContinuation { continuation in
            getPrFilesWithRequestBuilder(filesInput: filesInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Pr Files
     - POST /integrations/data/github/pull_requests/files
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter filesInput: (body)  
     - returns: RequestBuilder<FilesResponse> 
     */
    open class func getPrFilesWithRequestBuilder(
            filesInput: FilesInput
    ) -> RequestBuilder<FilesResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/github/pull_requests/files"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filesInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<FilesResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/pull_requests/files")
    }

    /**
     Pr Files
     - POST /integrations/data/github/pull_requests/files
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter filesInput: (body)  
     - returns: RequestBuilder<FilesResponse> 
     */
    open func getPrFilesWithRequestBuilder(
            filesInput: FilesInput
    ) -> RequestBuilder<FilesResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/github/pull_requests/files"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filesInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<FilesResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/pull_requests/files")
    }


    /**
     Get Prs
     
     - parameter pullRequestsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPullRequestsSync(pullRequestsInput: PullRequestsInput, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: PullRequestResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getPullRequestsWithRequestBuilder(pullRequestsInput: pullRequestsInput).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Prs
     
     - parameter pullRequestsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getPullRequestsAsyncMappedParams(pullRequestsInput: PullRequestsInput) async throws -> PullRequestResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getPullRequestsWithRequestBuilder(pullRequestsInput: pullRequestsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Prs
     
     - parameter pullRequestsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getPullRequests(
        dataSourceId: Int,
        repository: String,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil, 
        filters: PullRequestFilters? = nil, 
        orderBy: PROrderBy? = nil, 
        orderDir: OrderDirV2Nullable? = nil
    ) async throws -> PullRequestResponse {
        let pullRequestsInput = PullRequestsInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            filters: filters,
            orderBy: orderBy,
            orderDir: orderDir
        )
        return try await withCheckedThrowingContinuation { continuation in
            getPullRequestsWithRequestBuilder(pullRequestsInput: pullRequestsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Prs
     
     - parameter pullRequestsInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getPullRequests(
        dataSourceId: Int,
        repository: String,
        includeRemoteData: Bool? = nil, 
        page: Int? = nil, 
        pageSize: Int? = nil, 
        nextCursor: String? = nil, 
        filters: PullRequestFilters? = nil, 
        orderBy: PROrderBy? = nil, 
        orderDir: OrderDirV2Nullable? = nil
    ) async throws -> PullRequestResponse {
        let pullRequestsInput = PullRequestsInput(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            repository: repository,
            page: page,
            pageSize: pageSize,
            nextCursor: nextCursor,
            filters: filters,
            orderBy: orderBy,
            orderDir: orderDir
        )
        return try await withCheckedThrowingContinuation { continuation in
            getPullRequestsWithRequestBuilder(pullRequestsInput: pullRequestsInput).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Prs
     - POST /integrations/data/github/pull_requests
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter pullRequestsInput: (body)  
     - returns: RequestBuilder<PullRequestResponse> 
     */
    open class func getPullRequestsWithRequestBuilder(
            pullRequestsInput: PullRequestsInput
    ) -> RequestBuilder<PullRequestResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/github/pull_requests"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pullRequestsInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<PullRequestResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/pull_requests")
    }

    /**
     Get Prs
     - POST /integrations/data/github/pull_requests
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter pullRequestsInput: (body)  
     - returns: RequestBuilder<PullRequestResponse> 
     */
    open func getPullRequestsWithRequestBuilder(
            pullRequestsInput: PullRequestsInput
    ) -> RequestBuilder<PullRequestResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/github/pull_requests"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pullRequestsInput)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<PullRequestResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/github/pull_requests")
    }

}
