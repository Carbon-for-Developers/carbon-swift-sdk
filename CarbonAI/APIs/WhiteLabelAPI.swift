//
// WhiteLabelAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WhiteLabelAPI {

    weak var client: CarbonAIClient?

    public init(client: CarbonAIClient) {
        self.client = client
    }

    /**
     Create White Labels
     
     - parameter whiteLabelCreateRequestInner: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createSync(whiteLabelCreateRequestInner: [WhiteLabelCreateRequestInner], apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return createWithRequestBuilder(whiteLabelCreateRequestInner: whiteLabelCreateRequestInner).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create White Labels
     
     - parameter whiteLabelCreateRequestInner: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func createAsyncMappedParams(whiteLabelCreateRequestInner: [WhiteLabelCreateRequestInner]) async throws -> AnyCodable {
        return try await withCheckedThrowingContinuation { continuation in
            createWithRequestBuilder(whiteLabelCreateRequestInner: whiteLabelCreateRequestInner).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Create White Labels
     
     - parameter whiteLabelCreateRequestInner: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func create(
    ) async throws -> AnyCodable {
        let whiteLabelCreateRequestInner = [WhiteLabelCreateRequestInner](
        )
        return try await withCheckedThrowingContinuation { continuation in
            createWithRequestBuilder(whiteLabelCreateRequestInner: whiteLabelCreateRequestInner).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Create White Labels
     
     - parameter whiteLabelCreateRequestInner: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func create(
    ) async throws -> AnyCodable {
        let whiteLabelCreateRequestInner = [WhiteLabelCreateRequestInner](
        )
        return try await withCheckedThrowingContinuation { continuation in
            createWithRequestBuilder(whiteLabelCreateRequestInner: whiteLabelCreateRequestInner).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Create White Labels
     - POST /white_label/create
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - parameter whiteLabelCreateRequestInner: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func createWithRequestBuilder(
            whiteLabelCreateRequestInner: [WhiteLabelCreateRequestInner]
    ) -> RequestBuilder<AnyCodable> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/white_label/create"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: whiteLabelCreateRequestInner)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /white_label/create")
    }

    /**
     Create White Labels
     - POST /white_label/create
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - parameter whiteLabelCreateRequestInner: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open func createWithRequestBuilder(
            whiteLabelCreateRequestInner: [WhiteLabelCreateRequestInner]
    ) -> RequestBuilder<AnyCodable> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/white_label/create"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: whiteLabelCreateRequestInner)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /white_label/create")
    }


    /**
     Delete White Labels
     
     - parameter deleteWhiteLabelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteSync(deleteWhiteLabelRequest: DeleteWhiteLabelRequest, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteWithRequestBuilder(deleteWhiteLabelRequest: deleteWhiteLabelRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete White Labels
     
     - parameter deleteWhiteLabelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func deleteAsyncMappedParams(deleteWhiteLabelRequest: DeleteWhiteLabelRequest) async throws -> AnyCodable {
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(deleteWhiteLabelRequest: deleteWhiteLabelRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Delete White Labels
     
     - parameter deleteWhiteLabelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func delete(
        ids: [Int]
    ) async throws -> AnyCodable {
        let deleteWhiteLabelRequest = DeleteWhiteLabelRequest(
            ids: ids
        )
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(deleteWhiteLabelRequest: deleteWhiteLabelRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Delete White Labels
     
     - parameter deleteWhiteLabelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func delete(
        ids: [Int]
    ) async throws -> AnyCodable {
        let deleteWhiteLabelRequest = DeleteWhiteLabelRequest(
            ids: ids
        )
        return try await withCheckedThrowingContinuation { continuation in
            deleteWithRequestBuilder(deleteWhiteLabelRequest: deleteWhiteLabelRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Delete White Labels
     - POST /white_label/delete
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - parameter deleteWhiteLabelRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deleteWithRequestBuilder(
            deleteWhiteLabelRequest: DeleteWhiteLabelRequest
    ) -> RequestBuilder<AnyCodable> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/white_label/delete"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteWhiteLabelRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /white_label/delete")
    }

    /**
     Delete White Labels
     - POST /white_label/delete
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - parameter deleteWhiteLabelRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open func deleteWithRequestBuilder(
            deleteWhiteLabelRequest: DeleteWhiteLabelRequest
    ) -> RequestBuilder<AnyCodable> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/white_label/delete"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteWhiteLabelRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /white_label/delete")
    }


    /**
     List White Labels
     
     - parameter listWhiteLabelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listSync(listWhiteLabelRequest: ListWhiteLabelRequest, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return listWithRequestBuilder(listWhiteLabelRequest: listWhiteLabelRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List White Labels
     
     - parameter listWhiteLabelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func listAsyncMappedParams(listWhiteLabelRequest: ListWhiteLabelRequest) async throws -> AnyCodable {
        return try await withCheckedThrowingContinuation { continuation in
            listWithRequestBuilder(listWhiteLabelRequest: listWhiteLabelRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List White Labels
     
     - parameter listWhiteLabelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func list(
        pagination: Pagination? = nil, 
        orderBy: WhiteLabelOrderByColumns? = nil, 
        orderDir: OrderDir? = nil, 
        filters: WhiteLabelFilters? = nil
    ) async throws -> AnyCodable {
        let listWhiteLabelRequest = ListWhiteLabelRequest(
            pagination: pagination,
            orderBy: orderBy,
            orderDir: orderDir,
            filters: filters
        )
        return try await withCheckedThrowingContinuation { continuation in
            listWithRequestBuilder(listWhiteLabelRequest: listWhiteLabelRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     List White Labels
     
     - parameter listWhiteLabelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func list(
        pagination: Pagination? = nil, 
        orderBy: WhiteLabelOrderByColumns? = nil, 
        orderDir: OrderDir? = nil, 
        filters: WhiteLabelFilters? = nil
    ) async throws -> AnyCodable {
        let listWhiteLabelRequest = ListWhiteLabelRequest(
            pagination: pagination,
            orderBy: orderBy,
            orderDir: orderDir,
            filters: filters
        )
        return try await withCheckedThrowingContinuation { continuation in
            listWithRequestBuilder(listWhiteLabelRequest: listWhiteLabelRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     List White Labels
     - POST /white_label/list
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - parameter listWhiteLabelRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func listWithRequestBuilder(
            listWhiteLabelRequest: ListWhiteLabelRequest
    ) -> RequestBuilder<AnyCodable> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/white_label/list"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listWhiteLabelRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /white_label/list")
    }

    /**
     List White Labels
     - POST /white_label/list
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - parameter listWhiteLabelRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open func listWithRequestBuilder(
            listWhiteLabelRequest: ListWhiteLabelRequest
    ) -> RequestBuilder<AnyCodable> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/white_label/list"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listWhiteLabelRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /white_label/list")
    }


    /**
     Update White Label
     
     - parameter whiteLabelUpdateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateSync(whiteLabelUpdateRequest: WhiteLabelUpdateRequest, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return updateWithRequestBuilder(whiteLabelUpdateRequest: whiteLabelUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update White Label
     
     - parameter whiteLabelUpdateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func updateAsyncMappedParams(whiteLabelUpdateRequest: WhiteLabelUpdateRequest) async throws -> AnyCodable {
        return try await withCheckedThrowingContinuation { continuation in
            updateWithRequestBuilder(whiteLabelUpdateRequest: whiteLabelUpdateRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Update White Label
     
     - parameter whiteLabelUpdateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func update(
        dataSourceType: WhiteLabelUpdateRequest.DataSourceType? = nil, 
        credentials: Credentials? = nil
    ) async throws -> AnyCodable {
        let whiteLabelUpdateRequest = WhiteLabelUpdateRequest(
            dataSourceType: dataSourceType!,
            credentials: credentials!
        )
        return try await withCheckedThrowingContinuation { continuation in
            updateWithRequestBuilder(whiteLabelUpdateRequest: whiteLabelUpdateRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Update White Label
     
     - parameter whiteLabelUpdateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func update(
        dataSourceType: WhiteLabelUpdateRequest.DataSourceType? = nil, 
        credentials: Credentials? = nil
    ) async throws -> AnyCodable {
        let whiteLabelUpdateRequest = WhiteLabelUpdateRequest(
            dataSourceType: dataSourceType!,
            credentials: credentials!
        )
        return try await withCheckedThrowingContinuation { continuation in
            updateWithRequestBuilder(whiteLabelUpdateRequest: whiteLabelUpdateRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Update White Label
     - POST /white_label/update
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - parameter whiteLabelUpdateRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func updateWithRequestBuilder(
            whiteLabelUpdateRequest: WhiteLabelUpdateRequest
    ) -> RequestBuilder<AnyCodable> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/white_label/update"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: whiteLabelUpdateRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /white_label/update")
    }

    /**
     Update White Label
     - POST /white_label/update
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - parameter whiteLabelUpdateRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open func updateWithRequestBuilder(
            whiteLabelUpdateRequest: WhiteLabelUpdateRequest
    ) -> RequestBuilder<AnyCodable> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/white_label/update"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: whiteLabelUpdateRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /white_label/update")
    }

}
