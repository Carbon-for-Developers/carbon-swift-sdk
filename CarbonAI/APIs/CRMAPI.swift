//
// CRMAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CRMAPI {

    weak var client: CarbonAIClient?

    public init(client: CarbonAIClient) {
        self.client = client
    }

    /**
     Get Account
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountSync(id: String, dataSourceId: Int, includeRemoteData: Bool? = nil, includes: [BaseIncludes]? = nil, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: Account?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Account
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getAccountAsyncMappedParams(id: String, dataSourceId: Int, includeRemoteData: Bool? = nil, includes: [BaseIncludes]? = nil) async throws -> Account {
        return try await withCheckedThrowingContinuation { continuation in
            getAccountWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Account
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getAccount(
        id: String,
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        includes: [BaseIncludes]? = nil
    ) async throws -> Account {
        return try await withCheckedThrowingContinuation { continuation in
            getAccountWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Account
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getAccount(
        id: String,
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        includes: [BaseIncludes]? = nil
    ) async throws -> Account {
        return try await withCheckedThrowingContinuation { continuation in
            getAccountWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Account
     - GET /integrations/data/crm/accounts/{id}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - returns: RequestBuilder<Account> 
     */
    open class func getAccountWithRequestBuilder(
            id: String,
            dataSourceId: Int,
            includeRemoteData: Bool? = nil,
            includes: [BaseIncludes]? = nil
    ) -> RequestBuilder<Account> {
        let basePath = CarbonAIAPI.basePath;
        var localVariablePath = "/integrations/data/crm/accounts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data_source_id": (wrappedValue: dataSourceId.encodeToJSON(), isExplode: true),
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "includes": (wrappedValue: includes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Account>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/crm/accounts/{id}")
    }

    /**
     Get Account
     - GET /integrations/data/crm/accounts/{id}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - returns: RequestBuilder<Account> 
     */
    open func getAccountWithRequestBuilder(
            id: String,
            dataSourceId: Int,
            includeRemoteData: Bool? = nil,
            includes: [BaseIncludes]? = nil
    ) -> RequestBuilder<Account> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/integrations/data/crm/accounts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data_source_id": (wrappedValue: dataSourceId.encodeToJSON(), isExplode: true),
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "includes": (wrappedValue: includes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Account>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/crm/accounts/{id}")
    }


    /**
     Get Accounts
     
     - parameter accountsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountsSync(accountsRequest: AccountsRequest, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: AccountResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountsWithRequestBuilder(accountsRequest: accountsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Accounts
     
     - parameter accountsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getAccountsAsyncMappedParams(accountsRequest: AccountsRequest) async throws -> AccountResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getAccountsWithRequestBuilder(accountsRequest: accountsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Accounts
     
     - parameter accountsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getAccounts(
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        nextCursor: String? = nil, 
        pageSize: Int? = nil, 
        orderDir: OrderDirV2Nullable? = nil, 
        includes: [BaseIncludes]? = nil, 
        filters: AccountFilters? = nil, 
        orderBy: AccountsOrderByNullable? = nil
    ) async throws -> AccountResponse {
        let accountsRequest = AccountsRequest(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            nextCursor: nextCursor,
            pageSize: pageSize,
            orderDir: orderDir,
            includes: includes,
            filters: filters,
            orderBy: orderBy
        )
        return try await withCheckedThrowingContinuation { continuation in
            getAccountsWithRequestBuilder(accountsRequest: accountsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Accounts
     
     - parameter accountsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getAccounts(
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        nextCursor: String? = nil, 
        pageSize: Int? = nil, 
        orderDir: OrderDirV2Nullable? = nil, 
        includes: [BaseIncludes]? = nil, 
        filters: AccountFilters? = nil, 
        orderBy: AccountsOrderByNullable? = nil
    ) async throws -> AccountResponse {
        let accountsRequest = AccountsRequest(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            nextCursor: nextCursor,
            pageSize: pageSize,
            orderDir: orderDir,
            includes: includes,
            filters: filters,
            orderBy: orderBy
        )
        return try await withCheckedThrowingContinuation { continuation in
            getAccountsWithRequestBuilder(accountsRequest: accountsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Accounts
     - POST /integrations/data/crm/accounts
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter accountsRequest: (body)  
     - returns: RequestBuilder<AccountResponse> 
     */
    open class func getAccountsWithRequestBuilder(
            accountsRequest: AccountsRequest
    ) -> RequestBuilder<AccountResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/crm/accounts"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accountsRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<AccountResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/crm/accounts")
    }

    /**
     Get Accounts
     - POST /integrations/data/crm/accounts
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter accountsRequest: (body)  
     - returns: RequestBuilder<AccountResponse> 
     */
    open func getAccountsWithRequestBuilder(
            accountsRequest: AccountsRequest
    ) -> RequestBuilder<AccountResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/crm/accounts"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accountsRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<AccountResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/crm/accounts")
    }


    /**
     Get Contact
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getContactSync(id: String, dataSourceId: Int, includeRemoteData: Bool? = nil, includes: [BaseIncludes]? = nil, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: Contact?, _ error: Error?) -> Void)) -> RequestTask {
        return getContactWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Contact
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getContactAsyncMappedParams(id: String, dataSourceId: Int, includeRemoteData: Bool? = nil, includes: [BaseIncludes]? = nil) async throws -> Contact {
        return try await withCheckedThrowingContinuation { continuation in
            getContactWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Contact
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getContact(
        id: String,
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        includes: [BaseIncludes]? = nil
    ) async throws -> Contact {
        return try await withCheckedThrowingContinuation { continuation in
            getContactWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Contact
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getContact(
        id: String,
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        includes: [BaseIncludes]? = nil
    ) async throws -> Contact {
        return try await withCheckedThrowingContinuation { continuation in
            getContactWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Contact
     - GET /integrations/data/crm/contacts/{id}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - returns: RequestBuilder<Contact> 
     */
    open class func getContactWithRequestBuilder(
            id: String,
            dataSourceId: Int,
            includeRemoteData: Bool? = nil,
            includes: [BaseIncludes]? = nil
    ) -> RequestBuilder<Contact> {
        let basePath = CarbonAIAPI.basePath;
        var localVariablePath = "/integrations/data/crm/contacts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data_source_id": (wrappedValue: dataSourceId.encodeToJSON(), isExplode: true),
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "includes": (wrappedValue: includes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Contact>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/crm/contacts/{id}")
    }

    /**
     Get Contact
     - GET /integrations/data/crm/contacts/{id}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - returns: RequestBuilder<Contact> 
     */
    open func getContactWithRequestBuilder(
            id: String,
            dataSourceId: Int,
            includeRemoteData: Bool? = nil,
            includes: [BaseIncludes]? = nil
    ) -> RequestBuilder<Contact> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/integrations/data/crm/contacts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data_source_id": (wrappedValue: dataSourceId.encodeToJSON(), isExplode: true),
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "includes": (wrappedValue: includes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Contact>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/crm/contacts/{id}")
    }


    /**
     Get Contacts
     
     - parameter contactsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getContactsSync(contactsRequest: ContactsRequest, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: ContactsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getContactsWithRequestBuilder(contactsRequest: contactsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Contacts
     
     - parameter contactsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getContactsAsyncMappedParams(contactsRequest: ContactsRequest) async throws -> ContactsResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getContactsWithRequestBuilder(contactsRequest: contactsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Contacts
     
     - parameter contactsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getContacts(
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        nextCursor: String? = nil, 
        pageSize: Int? = nil, 
        orderDir: OrderDirV2Nullable? = nil, 
        includes: [BaseIncludes]? = nil, 
        filters: ContactFilters? = nil, 
        orderBy: ContactsOrderByNullable? = nil
    ) async throws -> ContactsResponse {
        let contactsRequest = ContactsRequest(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            nextCursor: nextCursor,
            pageSize: pageSize,
            orderDir: orderDir,
            includes: includes,
            filters: filters,
            orderBy: orderBy
        )
        return try await withCheckedThrowingContinuation { continuation in
            getContactsWithRequestBuilder(contactsRequest: contactsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Contacts
     
     - parameter contactsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getContacts(
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        nextCursor: String? = nil, 
        pageSize: Int? = nil, 
        orderDir: OrderDirV2Nullable? = nil, 
        includes: [BaseIncludes]? = nil, 
        filters: ContactFilters? = nil, 
        orderBy: ContactsOrderByNullable? = nil
    ) async throws -> ContactsResponse {
        let contactsRequest = ContactsRequest(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            nextCursor: nextCursor,
            pageSize: pageSize,
            orderDir: orderDir,
            includes: includes,
            filters: filters,
            orderBy: orderBy
        )
        return try await withCheckedThrowingContinuation { continuation in
            getContactsWithRequestBuilder(contactsRequest: contactsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Contacts
     - POST /integrations/data/crm/contacts
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter contactsRequest: (body)  
     - returns: RequestBuilder<ContactsResponse> 
     */
    open class func getContactsWithRequestBuilder(
            contactsRequest: ContactsRequest
    ) -> RequestBuilder<ContactsResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/crm/contacts"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contactsRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<ContactsResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/crm/contacts")
    }

    /**
     Get Contacts
     - POST /integrations/data/crm/contacts
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter contactsRequest: (body)  
     - returns: RequestBuilder<ContactsResponse> 
     */
    open func getContactsWithRequestBuilder(
            contactsRequest: ContactsRequest
    ) -> RequestBuilder<ContactsResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/crm/contacts"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contactsRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<ContactsResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/crm/contacts")
    }


    /**
     Get Lead
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLeadSync(id: String, dataSourceId: Int, includeRemoteData: Bool? = nil, includes: [BaseIncludes]? = nil, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: Lead?, _ error: Error?) -> Void)) -> RequestTask {
        return getLeadWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Lead
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getLeadAsyncMappedParams(id: String, dataSourceId: Int, includeRemoteData: Bool? = nil, includes: [BaseIncludes]? = nil) async throws -> Lead {
        return try await withCheckedThrowingContinuation { continuation in
            getLeadWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Lead
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getLead(
        id: String,
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        includes: [BaseIncludes]? = nil
    ) async throws -> Lead {
        return try await withCheckedThrowingContinuation { continuation in
            getLeadWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Lead
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getLead(
        id: String,
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        includes: [BaseIncludes]? = nil
    ) async throws -> Lead {
        return try await withCheckedThrowingContinuation { continuation in
            getLeadWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Lead
     - GET /integrations/data/crm/leads/{id}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - returns: RequestBuilder<Lead> 
     */
    open class func getLeadWithRequestBuilder(
            id: String,
            dataSourceId: Int,
            includeRemoteData: Bool? = nil,
            includes: [BaseIncludes]? = nil
    ) -> RequestBuilder<Lead> {
        let basePath = CarbonAIAPI.basePath;
        var localVariablePath = "/integrations/data/crm/leads/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data_source_id": (wrappedValue: dataSourceId.encodeToJSON(), isExplode: true),
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "includes": (wrappedValue: includes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Lead>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/crm/leads/{id}")
    }

    /**
     Get Lead
     - GET /integrations/data/crm/leads/{id}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - returns: RequestBuilder<Lead> 
     */
    open func getLeadWithRequestBuilder(
            id: String,
            dataSourceId: Int,
            includeRemoteData: Bool? = nil,
            includes: [BaseIncludes]? = nil
    ) -> RequestBuilder<Lead> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/integrations/data/crm/leads/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data_source_id": (wrappedValue: dataSourceId.encodeToJSON(), isExplode: true),
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "includes": (wrappedValue: includes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Lead>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/crm/leads/{id}")
    }


    /**
     Get Leads
     
     - parameter leadsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLeadsSync(leadsRequest: LeadsRequest, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: LeadsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getLeadsWithRequestBuilder(leadsRequest: leadsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Leads
     
     - parameter leadsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getLeadsAsyncMappedParams(leadsRequest: LeadsRequest) async throws -> LeadsResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getLeadsWithRequestBuilder(leadsRequest: leadsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Leads
     
     - parameter leadsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getLeads(
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        nextCursor: String? = nil, 
        pageSize: Int? = nil, 
        orderDir: OrderDirV2Nullable? = nil, 
        includes: [BaseIncludes]? = nil, 
        filters: LeadFilters? = nil, 
        orderBy: LeadsOrderByNullable? = nil
    ) async throws -> LeadsResponse {
        let leadsRequest = LeadsRequest(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            nextCursor: nextCursor,
            pageSize: pageSize,
            orderDir: orderDir,
            includes: includes,
            filters: filters,
            orderBy: orderBy
        )
        return try await withCheckedThrowingContinuation { continuation in
            getLeadsWithRequestBuilder(leadsRequest: leadsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Leads
     
     - parameter leadsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getLeads(
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        nextCursor: String? = nil, 
        pageSize: Int? = nil, 
        orderDir: OrderDirV2Nullable? = nil, 
        includes: [BaseIncludes]? = nil, 
        filters: LeadFilters? = nil, 
        orderBy: LeadsOrderByNullable? = nil
    ) async throws -> LeadsResponse {
        let leadsRequest = LeadsRequest(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            nextCursor: nextCursor,
            pageSize: pageSize,
            orderDir: orderDir,
            includes: includes,
            filters: filters,
            orderBy: orderBy
        )
        return try await withCheckedThrowingContinuation { continuation in
            getLeadsWithRequestBuilder(leadsRequest: leadsRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Leads
     - POST /integrations/data/crm/leads
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter leadsRequest: (body)  
     - returns: RequestBuilder<LeadsResponse> 
     */
    open class func getLeadsWithRequestBuilder(
            leadsRequest: LeadsRequest
    ) -> RequestBuilder<LeadsResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/crm/leads"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: leadsRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<LeadsResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/crm/leads")
    }

    /**
     Get Leads
     - POST /integrations/data/crm/leads
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter leadsRequest: (body)  
     - returns: RequestBuilder<LeadsResponse> 
     */
    open func getLeadsWithRequestBuilder(
            leadsRequest: LeadsRequest
    ) -> RequestBuilder<LeadsResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/crm/leads"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: leadsRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<LeadsResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/crm/leads")
    }


    /**
     Get Opportunities
     
     - parameter opportunitiesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOpportunitiesSync(opportunitiesRequest: OpportunitiesRequest, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: OpportunitiesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getOpportunitiesWithRequestBuilder(opportunitiesRequest: opportunitiesRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Opportunities
     
     - parameter opportunitiesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getOpportunitiesAsyncMappedParams(opportunitiesRequest: OpportunitiesRequest) async throws -> OpportunitiesResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getOpportunitiesWithRequestBuilder(opportunitiesRequest: opportunitiesRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Opportunities
     
     - parameter opportunitiesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getOpportunities(
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        nextCursor: String? = nil, 
        pageSize: Int? = nil, 
        orderDir: OrderDirV2Nullable? = nil, 
        includes: [BaseIncludes]? = nil, 
        filters: OpportunityFilters? = nil, 
        orderBy: OpportunitiesOrderByNullable? = nil
    ) async throws -> OpportunitiesResponse {
        let opportunitiesRequest = OpportunitiesRequest(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            nextCursor: nextCursor,
            pageSize: pageSize,
            orderDir: orderDir,
            includes: includes,
            filters: filters,
            orderBy: orderBy
        )
        return try await withCheckedThrowingContinuation { continuation in
            getOpportunitiesWithRequestBuilder(opportunitiesRequest: opportunitiesRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Opportunities
     
     - parameter opportunitiesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getOpportunities(
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        nextCursor: String? = nil, 
        pageSize: Int? = nil, 
        orderDir: OrderDirV2Nullable? = nil, 
        includes: [BaseIncludes]? = nil, 
        filters: OpportunityFilters? = nil, 
        orderBy: OpportunitiesOrderByNullable? = nil
    ) async throws -> OpportunitiesResponse {
        let opportunitiesRequest = OpportunitiesRequest(
            dataSourceId: dataSourceId,
            includeRemoteData: includeRemoteData,
            nextCursor: nextCursor,
            pageSize: pageSize,
            orderDir: orderDir,
            includes: includes,
            filters: filters,
            orderBy: orderBy
        )
        return try await withCheckedThrowingContinuation { continuation in
            getOpportunitiesWithRequestBuilder(opportunitiesRequest: opportunitiesRequest).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Opportunities
     - POST /integrations/data/crm/opportunities
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter opportunitiesRequest: (body)  
     - returns: RequestBuilder<OpportunitiesResponse> 
     */
    open class func getOpportunitiesWithRequestBuilder(
            opportunitiesRequest: OpportunitiesRequest
    ) -> RequestBuilder<OpportunitiesResponse> {
        let basePath = CarbonAIAPI.basePath;
        let localVariablePath = "/integrations/data/crm/opportunities"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: opportunitiesRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<OpportunitiesResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/crm/opportunities")
    }

    /**
     Get Opportunities
     - POST /integrations/data/crm/opportunities
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter opportunitiesRequest: (body)  
     - returns: RequestBuilder<OpportunitiesResponse> 
     */
    open func getOpportunitiesWithRequestBuilder(
            opportunitiesRequest: OpportunitiesRequest
    ) -> RequestBuilder<OpportunitiesResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/integrations/data/crm/opportunities"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: opportunitiesRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<OpportunitiesResponse>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "POST", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to POST /integrations/data/crm/opportunities")
    }


    /**
     Get Opportunity
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOpportunitySync(id: String, dataSourceId: Int, includeRemoteData: Bool? = nil, includes: [BaseIncludes]? = nil, apiResponseQueue: DispatchQueue = CarbonAIAPI.apiResponseQueue, completion: @escaping ((_ data: Opportunity?, _ error: Error?) -> Void)) -> RequestTask {
        return getOpportunityWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Opportunity
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func getOpportunityAsyncMappedParams(id: String, dataSourceId: Int, includeRemoteData: Bool? = nil, includes: [BaseIncludes]? = nil) async throws -> Opportunity {
        return try await withCheckedThrowingContinuation { continuation in
            getOpportunityWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get Opportunity
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func getOpportunity(
        id: String,
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        includes: [BaseIncludes]? = nil
    ) async throws -> Opportunity {
        return try await withCheckedThrowingContinuation { continuation in
            getOpportunityWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get Opportunity
     
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func getOpportunity(
        id: String,
        dataSourceId: Int,
        includeRemoteData: Bool? = nil, 
        includes: [BaseIncludes]? = nil
    ) async throws -> Opportunity {
        return try await withCheckedThrowingContinuation { continuation in
            getOpportunityWithRequestBuilder(id: id, dataSourceId: dataSourceId, includeRemoteData: includeRemoteData, includes: includes).execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get Opportunity
     - GET /integrations/data/crm/opportunities/{id}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - returns: RequestBuilder<Opportunity> 
     */
    open class func getOpportunityWithRequestBuilder(
            id: String,
            dataSourceId: Int,
            includeRemoteData: Bool? = nil,
            includes: [BaseIncludes]? = nil
    ) -> RequestBuilder<Opportunity> {
        let basePath = CarbonAIAPI.basePath;
        var localVariablePath = "/integrations/data/crm/opportunities/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data_source_id": (wrappedValue: dataSourceId.encodeToJSON(), isExplode: true),
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "includes": (wrappedValue: includes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: CarbonAIAPI.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: CarbonAIAPI.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Opportunity>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/crm/opportunities/{id}")
    }

    /**
     Get Opportunity
     - GET /integrations/data/crm/opportunities/{id}
     - API Key:
       - type: apiKey authorization 
       - name: accessToken
     - API Key:
       - type: apiKey authorization 
       - name: apiKey
     - API Key:
       - type: apiKey customer-id 
       - name: customerId
     - parameter id: (path)  
     - parameter dataSourceId: (query)  
     - parameter includeRemoteData: (query)  (optional, default to false)
     - parameter includes: (query)  (optional)
     - returns: RequestBuilder<Opportunity> 
     */
    open func getOpportunityWithRequestBuilder(
            id: String,
            dataSourceId: Int,
            includeRemoteData: Bool? = nil,
            includes: [BaseIncludes]? = nil
    ) -> RequestBuilder<Opportunity> {
        let basePath = self.client!.basePath;
        var localVariablePath = "/integrations/data/crm/opportunities/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil
        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "data_source_id": (wrappedValue: dataSourceId.encodeToJSON(), isExplode: true),
            "include_remote_data": (wrappedValue: includeRemoteData?.encodeToJSON(), isExplode: true),
            "includes": (wrappedValue: includes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.accessToken, prefix: "Token ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "authorization", value: self.client!.apiKey, prefix: "Bearer ")
            try Authentication.setAuthenticationParameters(headers: &localVariableHeaderParameters, url: &localVariableUrlComponents, in: "header", name: "customer-id", value: self.client!.customerId, prefix: nil)
            let localVariableRequestBuilder: RequestBuilder<Opportunity>.Type = CarbonAIAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /integrations/data/crm/opportunities/{id}")
    }

}
