//
// DeleteFilesQueryInput.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeleteFilesQueryInput: Codable, JSONEncodable, Hashable {

    public var fileIds: [Int]?
    public var syncStatuses: [ExternalFileSyncStatuses]?
    public var deleteNonSyncedOnly: Bool? = false
    public var sendWebhook: Bool? = false
    public var deleteChildFiles: Bool? = false

    public init(fileIds: [Int]? = nil, syncStatuses: [ExternalFileSyncStatuses]? = nil, deleteNonSyncedOnly: Bool? = false, sendWebhook: Bool? = false, deleteChildFiles: Bool? = false) {
        self.fileIds = fileIds
        self.syncStatuses = syncStatuses
        self.deleteNonSyncedOnly = deleteNonSyncedOnly
        self.sendWebhook = sendWebhook
        self.deleteChildFiles = deleteChildFiles
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileIds = "file_ids"
        case syncStatuses = "sync_statuses"
        case deleteNonSyncedOnly = "delete_non_synced_only"
        case sendWebhook = "send_webhook"
        case deleteChildFiles = "delete_child_files"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encodeIfPresent(fileIds, forKey: .fileIds)
        try codingContainer.encodeIfPresent(syncStatuses, forKey: .syncStatuses)
        try codingContainer.encodeIfPresent(deleteNonSyncedOnly, forKey: .deleteNonSyncedOnly)
        try codingContainer.encodeIfPresent(sendWebhook, forKey: .sendWebhook)
        try codingContainer.encodeIfPresent(deleteChildFiles, forKey: .deleteChildFiles)
    }
}

