//
// S3AuthRequest.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct S3AuthRequest: Codable, JSONEncodable, Hashable {

    public var accessKey: String
    public var accessKeySecret: String
    /** Enabling this flag will fetch all available content from the source to be listed via list items endpoint */
    public var syncSourceItems: Bool? = true
    /** You can specify a Digital Ocean endpoint URL to connect a Digital Ocean Space through this endpoint.         The URL should be of format <region>.digitaloceanspaces.com. It's not required for S3 buckets. */
    public var endpointUrl: String?
    /** Tags to be associated with the data source. If the data source already has tags set, then an upsert will be performed. */
    public var dataSourceTags: AnyCodable?

    public init(accessKey: String, accessKeySecret: String, syncSourceItems: Bool? = true, endpointUrl: String? = nil, dataSourceTags: AnyCodable? = nil) {
        self.accessKey = accessKey
        self.accessKeySecret = accessKeySecret
        self.syncSourceItems = syncSourceItems
        self.endpointUrl = endpointUrl
        self.dataSourceTags = dataSourceTags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessKey = "access_key"
        case accessKeySecret = "access_key_secret"
        case syncSourceItems = "sync_source_items"
        case endpointUrl = "endpoint_url"
        case dataSourceTags = "data_source_tags"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encode(accessKey, forKey: .accessKey)
        try codingContainer.encode(accessKeySecret, forKey: .accessKeySecret)
        try codingContainer.encodeIfPresent(syncSourceItems, forKey: .syncSourceItems)
        try codingContainer.encodeIfPresent(endpointUrl, forKey: .endpointUrl)
        try codingContainer.encodeIfPresent(dataSourceTags, forKey: .dataSourceTags)
    }
}

