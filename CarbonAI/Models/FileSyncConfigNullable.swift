//
// FileSyncConfigNullable.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Used to configure file syncing for certain connectors when sync_files_on_connection is set to true */
public struct FileSyncConfigNullable: Codable, JSONEncodable, Hashable {

    /** File types to automatically sync when the data source connects. Only a subset of file types can be          controlled. If not supported, then they will always be synced */
    public var autoSyncedSourceTypes: [HelpdeskFileTypes]?
    /** Automatically sync attachments from files where supported. Currently applies to Helpdesk Tickets */
    public var syncAttachments: Bool? = false
    /** Detect audio language before transcription for audio files */
    public var detectAudioLanguage: Bool? = false
    public var transcriptionService: TranscriptionServiceNullable?
    /** Detect multiple speakers and label segments of speech by speaker for audio files. */
    public var includeSpeakerLabels: Bool? = false
    /** Whether to split tabular rows into chunks. Currently only valid for CSV, TSV, and XLSX files. */
    public var splitRows: Bool? = false

    public init(autoSyncedSourceTypes: [HelpdeskFileTypes]? = nil, syncAttachments: Bool? = false, detectAudioLanguage: Bool? = false, transcriptionService: TranscriptionServiceNullable? = nil, includeSpeakerLabels: Bool? = false, splitRows: Bool? = false) {
        self.autoSyncedSourceTypes = autoSyncedSourceTypes
        self.syncAttachments = syncAttachments
        self.detectAudioLanguage = detectAudioLanguage
        self.transcriptionService = transcriptionService
        self.includeSpeakerLabels = includeSpeakerLabels
        self.splitRows = splitRows
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case autoSyncedSourceTypes = "auto_synced_source_types"
        case syncAttachments = "sync_attachments"
        case detectAudioLanguage = "detect_audio_language"
        case transcriptionService = "transcription_service"
        case includeSpeakerLabels = "include_speaker_labels"
        case splitRows = "split_rows"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(autoSyncedSourceTypes, forKey: .autoSyncedSourceTypes)
        try container.encodeIfPresent(syncAttachments, forKey: .syncAttachments)
        try container.encodeIfPresent(detectAudioLanguage, forKey: .detectAudioLanguage)
        try container.encodeIfPresent(transcriptionService, forKey: .transcriptionService)
        try container.encodeIfPresent(includeSpeakerLabels, forKey: .includeSpeakerLabels)
        try container.encodeIfPresent(splitRows, forKey: .splitRows)
    }
}

