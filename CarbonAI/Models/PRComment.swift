//
// PRComment.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PRComment: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var pullRequestReviewId: Int?
    public var url: String
    public var diffHunk: String
    public var path: String
    public var user: User
    public var body: String
    public var createdAt: String
    public var updatedAt: String
    public var startLine: Int?
    public var line: Int?
    public var remoteData: AnyCodable?

    public init(id: Int, pullRequestReviewId: Int?, url: String, diffHunk: String, path: String, user: User, body: String, createdAt: String, updatedAt: String, startLine: Int?, line: Int?, remoteData: AnyCodable?) {
        self.id = id
        self.pullRequestReviewId = pullRequestReviewId
        self.url = url
        self.diffHunk = diffHunk
        self.path = path
        self.user = user
        self.body = body
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.startLine = startLine
        self.line = line
        self.remoteData = remoteData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case pullRequestReviewId = "pull_request_review_id"
        case url
        case diffHunk = "diff_hunk"
        case path
        case user
        case body
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case startLine = "start_line"
        case line
        case remoteData = "remote_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encode(id, forKey: .id)
        try codingContainer.encode(pullRequestReviewId, forKey: .pullRequestReviewId)
        try codingContainer.encode(url, forKey: .url)
        try codingContainer.encode(diffHunk, forKey: .diffHunk)
        try codingContainer.encode(path, forKey: .path)
        try codingContainer.encode(user, forKey: .user)
        try codingContainer.encode(body, forKey: .body)
        try codingContainer.encode(createdAt, forKey: .createdAt)
        try codingContainer.encode(updatedAt, forKey: .updatedAt)
        try codingContainer.encode(startLine, forKey: .startLine)
        try codingContainer.encode(line, forKey: .line)
        try codingContainer.encode(remoteData, forKey: .remoteData)
    }
}

