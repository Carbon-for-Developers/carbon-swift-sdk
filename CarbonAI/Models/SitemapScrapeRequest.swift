//
// SitemapScrapeRequest.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SitemapScrapeRequest: Codable, JSONEncodable, Hashable {

    public var tags: [String: Tags1]?
    public var url: String
    public var maxPagesToScrape: Int?
    public var chunkSize: Int? = 1500
    public var chunkOverlap: Int? = 20
    public var skipEmbeddingGeneration: Bool? = false
    public var enableAutoSync: Bool? = false
    public var generateSparseVectors: Bool? = false
    public var prependFilenameToChunks: Bool? = false
    public var htmlTagsToSkip: [String]?
    public var cssClassesToSkip: [String]?
    public var cssSelectorsToSkip: [String]?
    public var embeddingModel: EmbeddingGenerators?
    /** URL subpaths or directories that you want to include. For example if you want to only include         URLs that start with /questions in stackoverflow.com, you will add /questions/ in this input */
    public var urlPathsToInclude: [String]?
    /** URL subpaths or directories that you want to exclude. For example if you want to exclude         URLs that start with /questions in stackoverflow.com, you will add /questions/ in this input */
    public var urlPathsToExclude: [String]?
    /** You can submit a subset of URLs from the sitemap that should be scraped. To get the list of URLs,           you can check out /process_sitemap endpoint. If left empty, all URLs from the sitemap will be scraped. */
    public var urlsToScrape: [String]?
    /** Whether the scraper should download css and media from the page (images, fonts, etc). Scrapes          might take longer to finish with this flag enabled, but the success rate is improved. */
    public var downloadCssAndMedia: Bool? = false
    /** If this flag is enabled, the file will be chunked and stored with Carbon,           but no embeddings will be generated. This overrides the skip_embedding_generation flag. */
    public var generateChunksOnly: Bool? = false

    public init(tags: [String: Tags1]? = nil, url: String, maxPagesToScrape: Int? = nil, chunkSize: Int? = 1500, chunkOverlap: Int? = 20, skipEmbeddingGeneration: Bool? = false, enableAutoSync: Bool? = false, generateSparseVectors: Bool? = false, prependFilenameToChunks: Bool? = false, htmlTagsToSkip: [String]? = nil, cssClassesToSkip: [String]? = nil, cssSelectorsToSkip: [String]? = nil, embeddingModel: EmbeddingGenerators? = nil, urlPathsToInclude: [String]? = nil, urlPathsToExclude: [String]? = nil, urlsToScrape: [String]? = nil, downloadCssAndMedia: Bool? = false, generateChunksOnly: Bool? = false) {
        self.tags = tags
        self.url = url
        self.maxPagesToScrape = maxPagesToScrape
        self.chunkSize = chunkSize
        self.chunkOverlap = chunkOverlap
        self.skipEmbeddingGeneration = skipEmbeddingGeneration
        self.enableAutoSync = enableAutoSync
        self.generateSparseVectors = generateSparseVectors
        self.prependFilenameToChunks = prependFilenameToChunks
        self.htmlTagsToSkip = htmlTagsToSkip
        self.cssClassesToSkip = cssClassesToSkip
        self.cssSelectorsToSkip = cssSelectorsToSkip
        self.embeddingModel = embeddingModel
        self.urlPathsToInclude = urlPathsToInclude
        self.urlPathsToExclude = urlPathsToExclude
        self.urlsToScrape = urlsToScrape
        self.downloadCssAndMedia = downloadCssAndMedia
        self.generateChunksOnly = generateChunksOnly
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tags
        case url
        case maxPagesToScrape = "max_pages_to_scrape"
        case chunkSize = "chunk_size"
        case chunkOverlap = "chunk_overlap"
        case skipEmbeddingGeneration = "skip_embedding_generation"
        case enableAutoSync = "enable_auto_sync"
        case generateSparseVectors = "generate_sparse_vectors"
        case prependFilenameToChunks = "prepend_filename_to_chunks"
        case htmlTagsToSkip = "html_tags_to_skip"
        case cssClassesToSkip = "css_classes_to_skip"
        case cssSelectorsToSkip = "css_selectors_to_skip"
        case embeddingModel = "embedding_model"
        case urlPathsToInclude = "url_paths_to_include"
        case urlPathsToExclude = "url_paths_to_exclude"
        case urlsToScrape = "urls_to_scrape"
        case downloadCssAndMedia = "download_css_and_media"
        case generateChunksOnly = "generate_chunks_only"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encodeIfPresent(tags, forKey: .tags)
        try codingContainer.encode(url, forKey: .url)
        try codingContainer.encodeIfPresent(maxPagesToScrape, forKey: .maxPagesToScrape)
        try codingContainer.encodeIfPresent(chunkSize, forKey: .chunkSize)
        try codingContainer.encodeIfPresent(chunkOverlap, forKey: .chunkOverlap)
        try codingContainer.encodeIfPresent(skipEmbeddingGeneration, forKey: .skipEmbeddingGeneration)
        try codingContainer.encodeIfPresent(enableAutoSync, forKey: .enableAutoSync)
        try codingContainer.encodeIfPresent(generateSparseVectors, forKey: .generateSparseVectors)
        try codingContainer.encodeIfPresent(prependFilenameToChunks, forKey: .prependFilenameToChunks)
        try codingContainer.encodeIfPresent(htmlTagsToSkip, forKey: .htmlTagsToSkip)
        try codingContainer.encodeIfPresent(cssClassesToSkip, forKey: .cssClassesToSkip)
        try codingContainer.encodeIfPresent(cssSelectorsToSkip, forKey: .cssSelectorsToSkip)
        try codingContainer.encodeIfPresent(embeddingModel, forKey: .embeddingModel)
        try codingContainer.encodeIfPresent(urlPathsToInclude, forKey: .urlPathsToInclude)
        try codingContainer.encodeIfPresent(urlPathsToExclude, forKey: .urlPathsToExclude)
        try codingContainer.encodeIfPresent(urlsToScrape, forKey: .urlsToScrape)
        try codingContainer.encodeIfPresent(downloadCssAndMedia, forKey: .downloadCssAndMedia)
        try codingContainer.encodeIfPresent(generateChunksOnly, forKey: .generateChunksOnly)
    }
}

