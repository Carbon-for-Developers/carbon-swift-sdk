//
// UploadFileFromUrlInput.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UploadFileFromUrlInput: Codable, JSONEncodable, Hashable {

    public var url: String
    public var fileName: String?
    public var chunkSize: Int?
    public var chunkOverlap: Int?
    public var skipEmbeddingGeneration: Bool? = false
    public var setPageAsBoundary: Bool? = false
    public var embeddingModel: EmbeddingGenerators?
    public var generateSparseVectors: Bool? = false
    public var useTextract: Bool? = false
    public var prependFilenameToChunks: Bool? = false
    /** Number of objects per chunk. For csv, tsv, xlsx, and json files only. */
    public var maxItemsPerChunk: Int?
    public var parsePdfTablesWithOcr: Bool? = false
    public var detectAudioLanguage: Bool? = false
    public var transcriptionService: TranscriptionServiceNullable?
    public var includeSpeakerLabels: Bool? = false
    public var mediaType: FileContentTypesNullable?
    public var splitRows: Bool? = false
    public var coldStorageParams: ColdStorageProps?
    /** If this flag is enabled, the file will be chunked and stored with Carbon,         but no embeddings will be generated. This overrides the skip_embedding_generation flag. */
    public var generateChunksOnly: Bool? = false
    /** If this flag is enabled, the file will be stored with Carbon, but no processing will be done. */
    public var storeFileOnly: Bool? = false

    public init(url: String, fileName: String? = nil, chunkSize: Int? = nil, chunkOverlap: Int? = nil, skipEmbeddingGeneration: Bool? = false, setPageAsBoundary: Bool? = false, embeddingModel: EmbeddingGenerators? = nil, generateSparseVectors: Bool? = false, useTextract: Bool? = false, prependFilenameToChunks: Bool? = false, maxItemsPerChunk: Int? = nil, parsePdfTablesWithOcr: Bool? = false, detectAudioLanguage: Bool? = false, transcriptionService: TranscriptionServiceNullable? = nil, includeSpeakerLabels: Bool? = false, mediaType: FileContentTypesNullable? = nil, splitRows: Bool? = false, coldStorageParams: ColdStorageProps? = nil, generateChunksOnly: Bool? = false, storeFileOnly: Bool? = false) {
        self.url = url
        self.fileName = fileName
        self.chunkSize = chunkSize
        self.chunkOverlap = chunkOverlap
        self.skipEmbeddingGeneration = skipEmbeddingGeneration
        self.setPageAsBoundary = setPageAsBoundary
        self.embeddingModel = embeddingModel
        self.generateSparseVectors = generateSparseVectors
        self.useTextract = useTextract
        self.prependFilenameToChunks = prependFilenameToChunks
        self.maxItemsPerChunk = maxItemsPerChunk
        self.parsePdfTablesWithOcr = parsePdfTablesWithOcr
        self.detectAudioLanguage = detectAudioLanguage
        self.transcriptionService = transcriptionService
        self.includeSpeakerLabels = includeSpeakerLabels
        self.mediaType = mediaType
        self.splitRows = splitRows
        self.coldStorageParams = coldStorageParams
        self.generateChunksOnly = generateChunksOnly
        self.storeFileOnly = storeFileOnly
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case url
        case fileName = "file_name"
        case chunkSize = "chunk_size"
        case chunkOverlap = "chunk_overlap"
        case skipEmbeddingGeneration = "skip_embedding_generation"
        case setPageAsBoundary = "set_page_as_boundary"
        case embeddingModel = "embedding_model"
        case generateSparseVectors = "generate_sparse_vectors"
        case useTextract = "use_textract"
        case prependFilenameToChunks = "prepend_filename_to_chunks"
        case maxItemsPerChunk = "max_items_per_chunk"
        case parsePdfTablesWithOcr = "parse_pdf_tables_with_ocr"
        case detectAudioLanguage = "detect_audio_language"
        case transcriptionService = "transcription_service"
        case includeSpeakerLabels = "include_speaker_labels"
        case mediaType = "media_type"
        case splitRows = "split_rows"
        case coldStorageParams = "cold_storage_params"
        case generateChunksOnly = "generate_chunks_only"
        case storeFileOnly = "store_file_only"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encode(url, forKey: .url)
        try codingContainer.encodeIfPresent(fileName, forKey: .fileName)
        try codingContainer.encodeIfPresent(chunkSize, forKey: .chunkSize)
        try codingContainer.encodeIfPresent(chunkOverlap, forKey: .chunkOverlap)
        try codingContainer.encodeIfPresent(skipEmbeddingGeneration, forKey: .skipEmbeddingGeneration)
        try codingContainer.encodeIfPresent(setPageAsBoundary, forKey: .setPageAsBoundary)
        try codingContainer.encodeIfPresent(embeddingModel, forKey: .embeddingModel)
        try codingContainer.encodeIfPresent(generateSparseVectors, forKey: .generateSparseVectors)
        try codingContainer.encodeIfPresent(useTextract, forKey: .useTextract)
        try codingContainer.encodeIfPresent(prependFilenameToChunks, forKey: .prependFilenameToChunks)
        try codingContainer.encodeIfPresent(maxItemsPerChunk, forKey: .maxItemsPerChunk)
        try codingContainer.encodeIfPresent(parsePdfTablesWithOcr, forKey: .parsePdfTablesWithOcr)
        try codingContainer.encodeIfPresent(detectAudioLanguage, forKey: .detectAudioLanguage)
        try codingContainer.encodeIfPresent(transcriptionService, forKey: .transcriptionService)
        try codingContainer.encodeIfPresent(includeSpeakerLabels, forKey: .includeSpeakerLabels)
        try codingContainer.encodeIfPresent(mediaType, forKey: .mediaType)
        try codingContainer.encodeIfPresent(splitRows, forKey: .splitRows)
        try codingContainer.encodeIfPresent(coldStorageParams, forKey: .coldStorageParams)
        try codingContainer.encodeIfPresent(generateChunksOnly, forKey: .generateChunksOnly)
        try codingContainer.encodeIfPresent(storeFileOnly, forKey: .storeFileOnly)
    }
}

