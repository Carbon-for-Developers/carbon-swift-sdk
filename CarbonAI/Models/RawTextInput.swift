//
// RawTextInput.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RawTextInput: Codable, JSONEncodable, Hashable {

    public var contents: String
    public var name: String?
    public var chunkSize: Int?
    public var chunkOverlap: Int?
    public var skipEmbeddingGeneration: Bool? = false
    public var overwriteFileId: Int?
    public var embeddingModel: EmbeddingGeneratorsNullable?
    public var generateSparseVectors: Bool? = false
    public var coldStorageParams: ColdStorageProps?
    /** If this flag is enabled, the file will be chunked and stored with Carbon,         but no embeddings will be generated. This overrides the skip_embedding_generation flag. */
    public var generateChunksOnly: Bool? = false
    /** If this flag is enabled, the file will be stored with Carbon, but no processing will be done. */
    public var storeFileOnly: Bool? = false

    public init(contents: String, name: String? = nil, chunkSize: Int? = nil, chunkOverlap: Int? = nil, skipEmbeddingGeneration: Bool? = false, overwriteFileId: Int? = nil, embeddingModel: EmbeddingGeneratorsNullable? = nil, generateSparseVectors: Bool? = false, coldStorageParams: ColdStorageProps? = nil, generateChunksOnly: Bool? = false, storeFileOnly: Bool? = false) {
        self.contents = contents
        self.name = name
        self.chunkSize = chunkSize
        self.chunkOverlap = chunkOverlap
        self.skipEmbeddingGeneration = skipEmbeddingGeneration
        self.overwriteFileId = overwriteFileId
        self.embeddingModel = embeddingModel
        self.generateSparseVectors = generateSparseVectors
        self.coldStorageParams = coldStorageParams
        self.generateChunksOnly = generateChunksOnly
        self.storeFileOnly = storeFileOnly
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contents
        case name
        case chunkSize = "chunk_size"
        case chunkOverlap = "chunk_overlap"
        case skipEmbeddingGeneration = "skip_embedding_generation"
        case overwriteFileId = "overwrite_file_id"
        case embeddingModel = "embedding_model"
        case generateSparseVectors = "generate_sparse_vectors"
        case coldStorageParams = "cold_storage_params"
        case generateChunksOnly = "generate_chunks_only"
        case storeFileOnly = "store_file_only"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encode(contents, forKey: .contents)
        try codingContainer.encodeIfPresent(name, forKey: .name)
        try codingContainer.encodeIfPresent(chunkSize, forKey: .chunkSize)
        try codingContainer.encodeIfPresent(chunkOverlap, forKey: .chunkOverlap)
        try codingContainer.encodeIfPresent(skipEmbeddingGeneration, forKey: .skipEmbeddingGeneration)
        try codingContainer.encodeIfPresent(overwriteFileId, forKey: .overwriteFileId)
        try codingContainer.encodeIfPresent(embeddingModel, forKey: .embeddingModel)
        try codingContainer.encodeIfPresent(generateSparseVectors, forKey: .generateSparseVectors)
        try codingContainer.encodeIfPresent(coldStorageParams, forKey: .coldStorageParams)
        try codingContainer.encodeIfPresent(generateChunksOnly, forKey: .generateChunksOnly)
        try codingContainer.encodeIfPresent(storeFileOnly, forKey: .storeFileOnly)
    }
}

