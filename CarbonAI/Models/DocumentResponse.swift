//
// DocumentResponse.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DocumentResponse: Codable, JSONEncodable, Hashable {

    public var tags: [String: Tags]?
    public var content: String
    public var fileId: Int
    public var parentFileId: Int?
    public var source: String?
    public var sourceUrl: String?
    public var sourceType: DataSourceTypeNullable?
    public var presignedUrl: String?
    public var vector: [Double]?
    public var score: Double?
    public var rank: RankProperty?
    public var contentMetadata: AnyCodable?
    public var chunkIndex: Int?

    public init(tags: [String: Tags]? = nil, content: String, fileId: Int, parentFileId: Int? = nil, source: String? = nil, sourceUrl: String? = nil, sourceType: DataSourceTypeNullable? = nil, presignedUrl: String? = nil, vector: [Double]?, score: Double? = nil, rank: RankProperty? = nil, contentMetadata: AnyCodable? = nil, chunkIndex: Int? = nil) {
        self.tags = tags
        self.content = content
        self.fileId = fileId
        self.parentFileId = parentFileId
        self.source = source
        self.sourceUrl = sourceUrl
        self.sourceType = sourceType
        self.presignedUrl = presignedUrl
        self.vector = vector
        self.score = score
        self.rank = rank
        self.contentMetadata = contentMetadata
        self.chunkIndex = chunkIndex
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tags
        case content
        case fileId = "file_id"
        case parentFileId = "parent_file_id"
        case source
        case sourceUrl = "source_url"
        case sourceType = "source_type"
        case presignedUrl = "presigned_url"
        case vector
        case score
        case rank
        case contentMetadata = "content_metadata"
        case chunkIndex = "chunk_index"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encodeIfPresent(tags, forKey: .tags)
        try codingContainer.encode(content, forKey: .content)
        try codingContainer.encode(fileId, forKey: .fileId)
        try codingContainer.encodeIfPresent(parentFileId, forKey: .parentFileId)
        try codingContainer.encodeIfPresent(source, forKey: .source)
        try codingContainer.encodeIfPresent(sourceUrl, forKey: .sourceUrl)
        try codingContainer.encodeIfPresent(sourceType, forKey: .sourceType)
        try codingContainer.encodeIfPresent(presignedUrl, forKey: .presignedUrl)
        try codingContainer.encode(vector, forKey: .vector)
        try codingContainer.encodeIfPresent(score, forKey: .score)
        try codingContainer.encodeIfPresent(rank, forKey: .rank)
        try codingContainer.encodeIfPresent(contentMetadata, forKey: .contentMetadata)
        try codingContainer.encodeIfPresent(chunkIndex, forKey: .chunkIndex)
    }
}

