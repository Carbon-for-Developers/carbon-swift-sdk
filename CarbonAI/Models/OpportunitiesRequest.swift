//
// OpportunitiesRequest.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OpportunitiesRequest: Codable, JSONEncodable, Hashable {

    public var dataSourceId: Int
    public var includeRemoteData: Bool? = false
    public var nextCursor: String?
    public var pageSize: Int?
    public var orderDir: OrderDirV2Nullable?
    public var includes: [BaseIncludes]?
    public var filters: OpportunityFilters?
    public var orderBy: OpportunitiesOrderByNullable?

    public init(dataSourceId: Int, includeRemoteData: Bool? = false, nextCursor: String? = nil, pageSize: Int? = nil, orderDir: OrderDirV2Nullable? = nil, includes: [BaseIncludes]? = nil, filters: OpportunityFilters? = nil, orderBy: OpportunitiesOrderByNullable? = nil) {
        self.dataSourceId = dataSourceId
        self.includeRemoteData = includeRemoteData
        self.nextCursor = nextCursor
        self.pageSize = pageSize
        self.orderDir = orderDir
        self.includes = includes
        self.filters = filters
        self.orderBy = orderBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dataSourceId = "data_source_id"
        case includeRemoteData = "include_remote_data"
        case nextCursor = "next_cursor"
        case pageSize = "page_size"
        case orderDir = "order_dir"
        case includes
        case filters
        case orderBy = "order_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encode(dataSourceId, forKey: .dataSourceId)
        try codingContainer.encodeIfPresent(includeRemoteData, forKey: .includeRemoteData)
        try codingContainer.encodeIfPresent(nextCursor, forKey: .nextCursor)
        try codingContainer.encodeIfPresent(pageSize, forKey: .pageSize)
        try codingContainer.encodeIfPresent(orderDir, forKey: .orderDir)
        try codingContainer.encodeIfPresent(includes, forKey: .includes)
        try codingContainer.encodeIfPresent(filters, forKey: .filters)
        try codingContainer.encodeIfPresent(orderBy, forKey: .orderBy)
    }
}

