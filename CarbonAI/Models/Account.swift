//
// Account.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Account: Codable, JSONEncodable, Hashable {

    public var description: String?
    public var id: String
    public var owner: PartialOwnerNullable?
    public var name: String?
    public var industry: String?
    public var website: String?
    public var numberOfEmployees: Int?
    public var addresses: [Address]
    public var phoneNumbers: [PhoneNumber]
    public var lastActivityAt: String?
    public var createdAt: String
    public var updatedAt: String
    public var isDeleted: Bool
    public var tasks: [Task]?
    public var events: [Event]?
    public var remoteData: AnyCodable?

    public init(description: String?, id: String, owner: PartialOwnerNullable?, name: String?, industry: String?, website: String?, numberOfEmployees: Int?, addresses: [Address], phoneNumbers: [PhoneNumber], lastActivityAt: String?, createdAt: String, updatedAt: String, isDeleted: Bool, tasks: [Task]? = nil, events: [Event]? = nil, remoteData: AnyCodable?) {
        self.description = description
        self.id = id
        self.owner = owner
        self.name = name
        self.industry = industry
        self.website = website
        self.numberOfEmployees = numberOfEmployees
        self.addresses = addresses
        self.phoneNumbers = phoneNumbers
        self.lastActivityAt = lastActivityAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.isDeleted = isDeleted
        self.tasks = tasks
        self.events = events
        self.remoteData = remoteData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case description
        case id
        case owner
        case name
        case industry
        case website
        case numberOfEmployees = "number_of_employees"
        case addresses
        case phoneNumbers = "phone_numbers"
        case lastActivityAt = "last_activity_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case isDeleted = "is_deleted"
        case tasks
        case events
        case remoteData = "remote_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encode(description, forKey: .description)
        try codingContainer.encode(id, forKey: .id)
        try codingContainer.encode(owner, forKey: .owner)
        try codingContainer.encode(name, forKey: .name)
        try codingContainer.encode(industry, forKey: .industry)
        try codingContainer.encode(website, forKey: .website)
        try codingContainer.encode(numberOfEmployees, forKey: .numberOfEmployees)
        try codingContainer.encode(addresses, forKey: .addresses)
        try codingContainer.encode(phoneNumbers, forKey: .phoneNumbers)
        try codingContainer.encode(lastActivityAt, forKey: .lastActivityAt)
        try codingContainer.encode(createdAt, forKey: .createdAt)
        try codingContainer.encode(updatedAt, forKey: .updatedAt)
        try codingContainer.encode(isDeleted, forKey: .isDeleted)
        try codingContainer.encodeIfPresent(tasks, forKey: .tasks)
        try codingContainer.encodeIfPresent(events, forKey: .events)
        try codingContainer.encode(remoteData, forKey: .remoteData)
    }
}

