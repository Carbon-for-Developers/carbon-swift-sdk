//
// SyncFilesRequest.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SyncFilesRequest: Codable, JSONEncodable, Hashable {

    public var tags: AnyCodable?
    public var dataSourceId: Int
    public var ids: IdsProperty
    public var chunkSize: Int? = 1500
    public var chunkOverlap: Int? = 20
    public var skipEmbeddingGeneration: Bool? = false
    public var embeddingModel: EmbeddingGeneratorsNullable?
    public var generateSparseVectors: Bool? = false
    public var prependFilenameToChunks: Bool? = false
    /** Number of objects per chunk. For csv, tsv, xlsx, and json files only. */
    public var maxItemsPerChunk: Int?
    public var setPageAsBoundary: Bool? = false
    public var requestId: String? = "74c95466-42b2-4213-ae36-bfafbaecfcf5"
    public var useOcr: Bool? = false
    public var parsePdfTablesWithOcr: Bool? = false

    public init(tags: AnyCodable? = nil, dataSourceId: Int, ids: IdsProperty, chunkSize: Int? = 1500, chunkOverlap: Int? = 20, skipEmbeddingGeneration: Bool? = false, embeddingModel: EmbeddingGeneratorsNullable? = nil, generateSparseVectors: Bool? = false, prependFilenameToChunks: Bool? = false, maxItemsPerChunk: Int? = nil, setPageAsBoundary: Bool? = false, requestId: String? = "74c95466-42b2-4213-ae36-bfafbaecfcf5", useOcr: Bool? = false, parsePdfTablesWithOcr: Bool? = false) {
        self.tags = tags
        self.dataSourceId = dataSourceId
        self.ids = ids
        self.chunkSize = chunkSize
        self.chunkOverlap = chunkOverlap
        self.skipEmbeddingGeneration = skipEmbeddingGeneration
        self.embeddingModel = embeddingModel
        self.generateSparseVectors = generateSparseVectors
        self.prependFilenameToChunks = prependFilenameToChunks
        self.maxItemsPerChunk = maxItemsPerChunk
        self.setPageAsBoundary = setPageAsBoundary
        self.requestId = requestId
        self.useOcr = useOcr
        self.parsePdfTablesWithOcr = parsePdfTablesWithOcr
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tags
        case dataSourceId = "data_source_id"
        case ids
        case chunkSize = "chunk_size"
        case chunkOverlap = "chunk_overlap"
        case skipEmbeddingGeneration = "skip_embedding_generation"
        case embeddingModel = "embedding_model"
        case generateSparseVectors = "generate_sparse_vectors"
        case prependFilenameToChunks = "prepend_filename_to_chunks"
        case maxItemsPerChunk = "max_items_per_chunk"
        case setPageAsBoundary = "set_page_as_boundary"
        case requestId = "request_id"
        case useOcr = "use_ocr"
        case parsePdfTablesWithOcr = "parse_pdf_tables_with_ocr"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encode(dataSourceId, forKey: .dataSourceId)
        try container.encode(ids, forKey: .ids)
        try container.encodeIfPresent(chunkSize, forKey: .chunkSize)
        try container.encodeIfPresent(chunkOverlap, forKey: .chunkOverlap)
        try container.encodeIfPresent(skipEmbeddingGeneration, forKey: .skipEmbeddingGeneration)
        try container.encodeIfPresent(embeddingModel, forKey: .embeddingModel)
        try container.encodeIfPresent(generateSparseVectors, forKey: .generateSparseVectors)
        try container.encodeIfPresent(prependFilenameToChunks, forKey: .prependFilenameToChunks)
        try container.encodeIfPresent(maxItemsPerChunk, forKey: .maxItemsPerChunk)
        try container.encodeIfPresent(setPageAsBoundary, forKey: .setPageAsBoundary)
        try container.encodeIfPresent(requestId, forKey: .requestId)
        try container.encodeIfPresent(useOcr, forKey: .useOcr)
        try container.encodeIfPresent(parsePdfTablesWithOcr, forKey: .parsePdfTablesWithOcr)
    }
}

