//
// SentWebhookPayload.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SentWebhookPayload: Codable, JSONEncodable, Hashable {

    public enum WebhookType: String, Codable, CaseIterable {
        case add = "ADD"
        case allUploadedFilesQueued = "ALL_UPLOADED_FILES_QUEUED"
        case cancel = "CANCEL"
        case checkup = "CHECKUP"
        case dataSourceReady = "DATA_SOURCE_READY"
        case filesCreated = "FILES_CREATED"
        case filesSkipped = "FILES_SKIPPED"
        case fileDeleted = "FILE_DELETED"
        case fileError = "FILE_ERROR"
        case fileReady = "FILE_READY"
        case fileStatisticsAggregated = "FILE_STATISTICS_AGGREGATED"
        case fileSyncLimitReached = "FILE_SYNC_LIMIT_REACHED"
        case organizationUserDeleted = "ORGANIZATION_USER_DELETED"
        case rateLimitError = "RATE_LIMIT_ERROR"
        case revoke = "REVOKE"
        case sparseVectorQueueStatus = "SPARSE_VECTOR_QUEUE_STATUS"
        case update = "UPDATE"
        case webpageError = "WEBPAGE_ERROR"
        case webpageReady = "WEBPAGE_READY"
        case webscrapeUrlsReady = "WEBSCRAPE_URLS_READY"
    }
    public var webhookType: WebhookType?
    public var customerId: String?
    public var timestamp: String?
    public var object: SentWebhookPayloadObject?

    public init(webhookType: WebhookType? = nil, customerId: String? = nil, timestamp: String? = nil, object: SentWebhookPayloadObject? = nil) {
        self.webhookType = webhookType
        self.customerId = customerId
        self.timestamp = timestamp
        self.object = object
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookType = "webhook_type"
        case customerId = "customer_id"
        case timestamp
        case object
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(webhookType, forKey: .webhookType)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(object, forKey: .object)
    }
}

