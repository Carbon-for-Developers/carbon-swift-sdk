//
// ResyncFileQueryInput.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ResyncFileQueryInput: Codable, JSONEncodable, Hashable {

    public var fileId: Int
    public var chunkSize: Int?
    public var chunkOverlap: Int?
    public var forceEmbeddingGeneration: Bool? = false
    public var skipFileProcessing: Bool? = false

    public init(fileId: Int, chunkSize: Int? = nil, chunkOverlap: Int? = nil, forceEmbeddingGeneration: Bool? = false, skipFileProcessing: Bool? = false) {
        self.fileId = fileId
        self.chunkSize = chunkSize
        self.chunkOverlap = chunkOverlap
        self.forceEmbeddingGeneration = forceEmbeddingGeneration
        self.skipFileProcessing = skipFileProcessing
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileId = "file_id"
        case chunkSize = "chunk_size"
        case chunkOverlap = "chunk_overlap"
        case forceEmbeddingGeneration = "force_embedding_generation"
        case skipFileProcessing = "skip_file_processing"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encode(fileId, forKey: .fileId)
        try codingContainer.encodeIfPresent(chunkSize, forKey: .chunkSize)
        try codingContainer.encodeIfPresent(chunkOverlap, forKey: .chunkOverlap)
        try codingContainer.encodeIfPresent(forceEmbeddingGeneration, forKey: .forceEmbeddingGeneration)
        try codingContainer.encodeIfPresent(skipFileProcessing, forKey: .skipFileProcessing)
    }
}

