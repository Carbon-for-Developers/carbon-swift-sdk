//
// Issue.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Issue: Codable, JSONEncodable, Hashable {

    public var title: String
    public var id: Int
    public var url: String
    public var htmlUrl: String
    public var number: Int
    public var user: User
    public var labels: [Label]
    public var state: PRState
    public var locked: Bool
    public var numComments: Int
    public var createdAt: String
    public var updatedAt: String
    public var closedAt: String?
    public var draft: Bool
    public var pullRequest: IssuePRNullable?
    public var body: String
    public var closedBy: UserNullable?

    public init(title: String, id: Int, url: String, htmlUrl: String, number: Int, user: User, labels: [Label], state: PRState, locked: Bool, numComments: Int, createdAt: String, updatedAt: String, closedAt: String?, draft: Bool, pullRequest: IssuePRNullable?, body: String, closedBy: UserNullable?) {
        self.title = title
        self.id = id
        self.url = url
        self.htmlUrl = htmlUrl
        self.number = number
        self.user = user
        self.labels = labels
        self.state = state
        self.locked = locked
        self.numComments = numComments
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.closedAt = closedAt
        self.draft = draft
        self.pullRequest = pullRequest
        self.body = body
        self.closedBy = closedBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case id
        case url
        case htmlUrl = "html_url"
        case number
        case user
        case labels
        case state
        case locked
        case numComments = "num_comments"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case closedAt = "closed_at"
        case draft
        case pullRequest = "pull_request"
        case body
        case closedBy = "closed_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var codingContainer = encoder.container(keyedBy: CodingKeys.self)
        try codingContainer.encode(title, forKey: .title)
        try codingContainer.encode(id, forKey: .id)
        try codingContainer.encode(url, forKey: .url)
        try codingContainer.encode(htmlUrl, forKey: .htmlUrl)
        try codingContainer.encode(number, forKey: .number)
        try codingContainer.encode(user, forKey: .user)
        try codingContainer.encode(labels, forKey: .labels)
        try codingContainer.encode(state, forKey: .state)
        try codingContainer.encode(locked, forKey: .locked)
        try codingContainer.encode(numComments, forKey: .numComments)
        try codingContainer.encode(createdAt, forKey: .createdAt)
        try codingContainer.encode(updatedAt, forKey: .updatedAt)
        try codingContainer.encode(closedAt, forKey: .closedAt)
        try codingContainer.encode(draft, forKey: .draft)
        try codingContainer.encode(pullRequest, forKey: .pullRequest)
        try codingContainer.encode(body, forKey: .body)
        try codingContainer.encode(closedBy, forKey: .closedBy)
    }
}

